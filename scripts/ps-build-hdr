#!/bin/bash
# NAME
#	ps-build-hdr - Build HDR-photos from a set of photos
#
# SYNOPSIS
#	ps-build-hdr [-k|--keep-hdr] -n|--number NUMBER
#	ps-build-hdr -h|--help|--usage
#	ps-build-hdr [-k|--keep-hdr] [FILENAME]...
#
# DESCRIPTION
#	Build HDR-photos from the photos in current directory by NUMBER photos
#	in each set. It is supposed that current directory contains photos only
#	and in each set there is the same photo is presented but made with
#	different exposures. The processing is based on the article of Dr.Lex
#	https://www.dr-lex.be/info-stuff/luminancehdr.html and automated.
#	The default number in each set is 3 as it is a usual bracketing number
#	for most cameras. It is also possible to process not the whole
#	directory but any number of given photos.
#
#	-k, --keep-hdr
#		If set, the intermediate hdr-file is not deleted and copied to
#		the output directory.
#
#	-n, --number
#		A number of photos is each set (default 3).
#
#	-h, --help, --usage
#		Display this information and quit.
#	FILENAME
#		A set of photo filenames.
#
# EXAMPLES
#	ps_build-hdr
#		Build HDR-photos from the current directory by 3 in a set.
#
#	ps-buld-hdr --number 5
#		Build HDR-photos from the current directory by 5 in a set.
#
#	ps-buld-hdr -k photo1.jpg photo2.jpg ../photo3.jpg
#		Build an HDR-photo from 3 provided photos and save an HDR-file.
#
################################################################################

trap "exit;" SIGINT SIGTERM

usage() {
	while IFS= read -r line || [ -n "$line" ]
	do
		case "$line" in
			'#!'*) # Shebang line
				;;
			''|'##'*|[!#]*) # End of comments
				exit
				;;
			*) # Comment line
				printf '%s\n' "$line" >&2 # Remove comment prefix
				;;
		esac
	done < "$1"
}

# Process parameters
params="$(getopt -o n:,k,h -l number:,keep-hdr,help,usage --name '$cmdname' -- "$@")"
[ $? -ne 0 ] && usage "$0"
eval set -- "$params"
unset params

while true
do
	case $1 in
		-n|--number)
			number=${2-}
			shift 2
			;;
		-k|--keep-hdr)
			keep_hdr=true
			shift
			;;
		-h|--help|--usage)
			usage "$0"
			exit
			;;
		*)
			break
			;;
	esac
done

shift

keep_hdr=${keep_hdr:=false}
number=${number:=3}
log_file="$HOME/.ps-build-hdr.log"

log() {
	echo "$1"
	echo "$1" >> $log_file
}

# Check if liminance-hdr installed
defineLuminanceHdrCli() {
	luminance_hdr_cli=$(which luminance-hdr-cli 2>/dev/null)
	if [[ "$luminance_hdr_cli" == "" ]]; then
		log "ERROR: luminance_hdr_cli is not found"
		exit 1
	fi

	# default options are for version 2.3
	hdr_options=("-c" "weight=gaussian:response_curve=gamma:model=debevec")
	ashikhmin_options=("-t" "ashikhmin" "-p" "localcontrast=0:eq=4:simple=false")
	mantiuk08_options=("-t" "mantiuk08" "-p" "colorsaturation=1:contrastenhancement=1:luminancelevel=1:setluminance=false")

	# for version 2.5 arguments are changed
	if  [[ "$($luminance_hdr_cli -V 2>&1 | grep 'version 2.5' | wc -l)" == "1" ]]; then
		hdr_options=("--hdrWeight=gaussian" "--hdrResponseCurve=gamma" "--hdrModel=debevec")
		ashikhmin_options=("--tmo" "ashikhmin" "--tmoAshLocal=0" "--tmoAshEq2=false" "--tmoAshSimple=false")
		mantiuk08_options=("--tmo" "mantiuk08" "--tmoM08ColorSaturation=1" "--tmoM08ConstrastEnh=1" "--tmoM08SetLuminance=false")
	fi
}

# Check if gimp installed
defineGimp() {
	gimp=$(which gimp 2>/dev/null)
	if [[ "$gimp" == "" ]]; then
		log "ERROR: gimp is not found"
		exit 1
	fi

	gimp_script=$(cat <<-END
	(define (build-hdr m a ma40)
	(let* (
		(img (car (gimp-file-load 1 m m)))
		(drawable (car (gimp-image-get-active-layer img)))
		(a-layer (car (gimp-file-load-layer 1 img a)))
	)
	(gimp-image-insert-layer img a-layer 0 -1)
	(gimp-layer-set-opacity a-layer 40)
	(gimp-layer-set-mode a-layer 3)
	(gimp-file-save 1 img (car (gimp-image-merge-visible-layers img 0)) ma40 ma40)
	))
	END
	)
}

# Check if exiftool installed (optional)
defineExiftool() {
	exiftool=$(which exiftool 2>/dev/null)
	if [[ "$exiftool" == "" ]]; then
		log "WARNING: exiftool is not found, EXIF data will be lost"
	fi
}

# Check if hugin installed
defineAlignEngine() {
	align_image_stack=$(which align_image_stack 2>/dev/null)
	if [[ "$align_image_stack" == "" ]]; then
		log "hugin is not installed, using MTB as an align engine"
		align_engine='MTB'
	else
		align_engine='AIS'
	fi
}

checkEVvalues() {
	log "check EV values"
	local min max
	IFS=$'\n'
	min=$(IFS=$'\n'; echo "${ev[*]}" | sort -n | head -n1)
	max=$(IFS=$'\n'; echo "${ev[*]}" | sort -nr | head -n1)
	if [[ $(awk "BEGIN{print ($max > 10)}") -eq 1 ]]; then
		for i in "$@"; do
			ev[$i]=$(awk "BEGIN{print ${ev[$i]} - $max + 10}");
			log "$i: ${ev[$i]}"
		done
	else
		if [[ $(awk "BEGIN{print ($min < -10)}") -eq 1 ]]; then
			for i in "$@"; do
				ev[$i]=$(awk "BEGIN{print ${ev[$i]} - $min - 10}");
				log "$i: ${ev[$i]}"
			done
		fi
	fi
}

calcEv() {
	local exposure_time iso aperture ev
	exposure_time=$(awk "BEGIN{print $1}")
	iso=$(awk "BEGIN{print $2}")
	aperture=$(awk "BEGIN{print $3}")
	ev=$(awk "BEGIN{print log($exposure_time * $iso / $aperture / $aperture / 12.07488) / log(2)}")
	printf "%s" "$ev"
}

setEVwithIdentify() {
	local exposure_time iso aperture
	exposure_time=$(identify -verbose "$1" | sed -n 's/^\ *exif:ExposureTime:\ //p')
	iso=$(identify -verbose "$1" | sed -n 's/^\ *exif:ISOSpeedRatings:\ //p')
	aperture=$(identify -verbose "$1" | sed -n 's/^\ *exif:FNumber:\ //p')
	calcEv $exposure_time $iso $aperture
}

setEVwithExiv2() {
	local exposure_time iso aperture
	exposure_time=$(exiv2 "$1" | sed -n 's/^Exposure time\ *:\ \(.*\)s$/\1/p')
	iso=$(exiv2 "$1" | sed -n 's/^ISO\ speed\ *:\ \(.*\)$/\1/p')
	aperture=$(exiv2 "$1" | sed -n 's/^Aperture\ *:\ F\(.*\)$/\1/p')
	calcEv $exposure_time $iso $aperture
}

declare -A ev=()
setEV() {
	which exiv2 > /dev/null 2>&1
	if [[ $? -eq 0 ]]; then
		log "calculate EV with exiv2"
		for i in "$@"; do
			ev[$i]=$(setEVwithExiv2 "$i")
			log "$i: ${ev[$i]}"
		done
	else
		which identify > /dev/null 2>&1
		if [[ $? -eq 0 ]]; then
			log "calculate EV with identify"
			for i in "$@"; do
				ev[$i]=$(setEVwithIdentify "$i")
				log "$i: ${ev[$i]}"
			done
		else
			log "ERROR: neither exiv2 nor identify is found"
			exit 1
		fi
	fi
	checkEVvalues "$@"
}

function joinEv {
	local args=()
	for i in "$@"; do
		args+=("${ev[$i]}")
	done
	local IFS=,
	echo "${args[*]}"
}

# Main script to build HDR-image
build_hdr() {
	setEV "$@"
	local tmpdir hdr_file ashikhmin_file mantiuk08_file output_file
	tmpdir=$(mktemp -d)
	hdr_file=$tmpdir/temp.hdr
	ashikhmin_file=$tmpdir/ashikhmin.jpg
	mantiuk08_file=$tmpdir/mantiuk08.jpg
	output_file=$(pwd)/${1%.*}.hdr.jpg
	joinedEv=$(joinEv "$@")

	log "Creating HDR-file"
	"$luminance_hdr_cli" -a "$align_engine" ${hdr_options[*]} -s "$hdr_file" -e "$joinedEv" "$@" >> "$log_file" 2>&1
	if [[ $? != 0 ]]; then
		echo "Error while executing the following command:"
		echo "$luminance_hdr_cli" -a "$align_engine" ${hdr_options[*]} -s "$hdr_file" -e "$joinedEv" "$@"
		echo "To get more information about the error read $log_file"
		exit 1;
	fi

	log "Making Ashikhmin layer"
	"$luminance_hdr_cli" -l "$hdr_file" ${ashikhmin_options[*]} -o "$ashikhmin_file" >> "$log_file" 2>&1
	if [[ $? != 0 ]]; then
		echo "Error while executing the following command:"
		echo "$luminance_hdr_cli" -l "$hdr_file" ${ashikhmin_options[*]} -o "$ashikhmin_file"
		echo "To get more information about the error read $log_file"
		exit 1;
	fi

	log "Making Mantiuk08 layer"
	"$luminance_hdr_cli" -l "$hdr_file" ${mantiuk08_options[*]} -o "$mantiuk08_file" >> "$log_file" 2>&1
	if [[ $? != 0 ]]; then
		echo "Error while executing the following command:"
		echo "$luminance_hdr_cli" -l "$hdr_file" ${mantiuk08_options[*]} -o "$mantiuk08_file"
		echo "To get more information about the error read $log_file"
		exit 1;
	fi

	log "Joining layers"
	"$gimp" -i -b "$gimp_script"' (build-hdr "'"$mantiuk08_file"'" "'"$ashikhmin_file"'" "'"$output_file"'")' -b '(gimp-quit 0)' >> "$log_file" 2>&1
	if [[ $? != 0 ]]; then
		echo "Error while executing the following command:"
		echo "$gimp " -i -b "$gimp_script"' (build-hdr "'"$mantiuk08_file"'" "'"$ashikhmin_file"'" "'"$output_file"'")' -b '(gimp-quit 0)'
		echo "To get more information about the error read $log_file"
		exit 1;
	fi

	if [[ "$exiftool" != "" ]]; then
		log "Copying EXIF"
		exiftool -tagsFromFile "$1" -quiet -overwrite_original "$output_file"
	fi

	if [[ "$keep_hdr" == "true" ]]; then
		mv $hdr_file $(pwd)/${1%.*}.hdr
	fi

	rm -rf "$tmpdir"
}

defineLuminanceHdrCli
defineGimp
defineAlignEngine
defineExiftool

if [[ "$#" == "0" ]]; then
	FILES=()
	for i in *; do
		FILES+=("$i")
		if [[ "${#FILES[@]}" == "$number" ]]; then
			echo "*************************************" >> "$log_file"
			echo "* Date  : $(date +%c)" >> "$log_file"
			echo "* Images: ${FILES[*]}" >> "$log_file"
			echo "*************************************" >> "$log_file"
			build_hdr "${FILES[@]}"
			FILES=()
		fi
	done
else
	build_hdr "$@"
fi
