#!/bin/bash
# NAME
#        ps-build-hdr - Build HDR-photos from a set of photos
#
# SYNOPSIS
#        ps-build-hdr -n|--number NUMBER
#        ps-build-hdr -h|--help|--usage
#        ps-build-hdr [FILENAME]...
#
# DESCRIPTION
#        Build HDR-photos from the photos in current directory by NUMBER photos
#        in each set. It is supposed that current directory contains photos only
#        and in each set there is the same photo is presented but made with
#        different exposures. The processing is based on the article of Dr.Lex
#        https://www.dr-lex.be/info-stuff/luminancehdr.html and automated.
#        The default number in each set is 3 as it is a usual bracketing number
#        for most cameras. It is also possible to process not the whole
#        directory but any number of given photos.
#
#        -n, --number
#                A number of photos is each set (default 3).
#
#        -h, --help, --usage
#                Display this information and quit.
#        FILENAME
#                A set of photo filenames.
#
# EXAMPLES
#        ps_build-hdr
#               Build HDR-photos from the current directory by 3 in a set.
#
#        ps-buld-hdr --number 5
#               Build HDR-photos from the current directory by 5 in a set.
#
#        ps-buld-hdr photo1.jpg photo2.jpg ../photo3.jpg
#               Build an HDR-photo from 3 provided photos.
#
################################################################################

trap "exit;" SIGINT SIGTERM

usage() {
    while IFS= read -r line || [ -n "$line" ]
    do
        case "$line" in
            '#!'*) # Shebang line
                ;;
            ''|'##'*|[!#]*) # End of comments
                exit
                ;;
            *) # Comment line
                printf '%s\n' "$line" >&2 # Remove comment prefix
                ;;
        esac
    done < "$1"
}

# Process parameters
params="$(getopt -o n:,h -l number:,help,usage --name '$cmdname' -- "$@")"
[ $? -ne 0 ] && usage "$0"
eval set -- "$params"
unset params

while true
do
    case $1 in
        -n|--number)
            number=${2-}
            shift 2
            ;;
        -h|--help|--usage)
            usage "$0"
            exit
            ;;
        *)
            break
            ;;
    esac
done

shift

number=${number:=3}
log_file="$HOME/.ps-build-hdr.log"

log() {
	echo "$1"
	echo "$1" >> $log_file
}

# Check if liminance-hdr installed
defineLuminanceHdrCli() {
	luminance_hdr_cli=$(which luminance-hdr-cli 2>/dev/null)
	if [[ "$luminance_hdr_cli" == "" ]]; then
		log "ERROR: luminance_hdr_cli is not found"
		exit 1
	fi

	hdr_options="weight=gaussian:response_curve=gamma:model=debevec"
	ashikhmin_options="localcontrast=0:eq=4:simple=false"
	mantiuk08_options="colorsaturation=1:contrastenhancement=1:luminancelevel=1:setluminance=false"
}

# Check if gimp installed
defineGimp() {
	gimp=$(which gimp 2>/dev/null)
	if [[ "$gimp" == "" ]]; then
		log "ERROR: gimp is not found"
		exit 1
	fi

	gimp_script=$(cat <<-END
	(define (build-hdr m a ma40)
	(let* (
		(img (car (gimp-file-load 1 m m)))
		(drawable (car (gimp-image-get-active-layer img)))
		(a-layer (car (gimp-file-load-layer 1 img a)))
	)
	(gimp-image-insert-layer img a-layer 0 -1)
	(gimp-layer-set-opacity a-layer 40)
	(gimp-layer-set-mode a-layer 3)
	(gimp-file-save 1 img (car (gimp-image-merge-visible-layers img 0)) ma40 ma40)
	))
	END
	)
}

build_hdr() {
	local tmpdir hdr_file ashikhmin_file mantiuk08_file output_file
	tmpdir=$(mktemp -d)
	hdr_file=$tmpdir/temp.hdr
	ashikhmin_file=$tmpdir/ashikhmin.jpg
	mantiuk08_file=$tmpdir/mantiuk08.jpg
	output_file=$(pwd)/${1%.*}.ma40.jpg

	log "Creating HDR-file"
	"$luminance_hdr_cli" -a AIS -c $hdr_options -s "$hdr_file" "$@" >> "$log_file" 2>&1
	if [[ $? != 0 ]]; then
		echo "Error while executing the following command:"
		echo "$luminance_hdr_cli" -a AIS -c $hdr_options -s "$hdr_file" "$@"
		echo "To get more information about the error read $log_file"
		exit 1;
	fi

	log "Making Ashikhmin layer"
	"$luminance_hdr_cli" -l "$hdr_file" -t ashikhmin -p $ashikhmin_options -o "$ashikhmin_file" >> "$log_file" 2>&1
	if [[ $? != 0 ]]; then
		echo "Error while executing the following command:"
		echo "$luminance_hdr_cli" -l "$hdr_file" -t ashikhmin -p $ashikhmin_options -o "$ashikhmin_file"
		echo "To get more information about the error read $log_file"
		exit 1;
	fi

	log "Making Mantiuk08 layer"
	"$luminance_hdr_cli" -l "$hdr_file" -t mantiuk08 -p $mantiuk08_options -o "$mantiuk08_file" >> "$log_file" 2>&1
	if [[ $? != 0 ]]; then
		echo "Error while executing the following command:"
		echo "$luminance_hdr_cli" -l "$hdr_file" -t mantiuk08 -p $mantiuk08_options -o "$mantiuk08_file"
		echo "To get more information about the error read $log_file"
		exit 1;
	fi

	log "Joining layers"
	"$gimp" -i -b "$gimp_script"' (build-hdr "'"$mantiuk08_file"'" "'"$ashikhmin_file"'" "'"$output_file"'")' -b '(gimp-quit 0)' >> "$log_file" 2>&1
	if [[ $? != 0 ]]; then
		echo "Error while executing the following command:"
		echo "$gimp " -i -b "$gimp_script"' (build-hdr "'"$mantiuk08_file"'" "'"$ashikhmin_file"'" "'"$output_file"'")' -b '(gimp-quit 0)'
		echo "To get more information about the error read $log_file"
		exit 1;
	fi

	rm -rf "$TMPDIR"
}

defineLuminanceHdrCli
defineGimp

if [[ "$#" == "0" ]]; then
	FILES=()
	for i in *; do
		FILES+=("$i")
		if [[ "${#FILES[@]}" == "$number" ]]; then
			echo "*************************************" >> "$log_file"
			echo "* Date  : $(date +%c)" >> "$log_file"
			echo "* Images: ${FILES[*]}" >> "$log_file"
			echo "*************************************" >> "$log_file"
			build_hdr "${FILES[@]}"
			FILES=()
		fi
	done
else
	build_hdr "$@"
fi
